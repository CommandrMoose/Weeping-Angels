buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = 'https://sizableshrimp.me/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath group: 'gradle.plugin.com.modrinth.minotaur', name: 'Minotaur', version: '1.2.1'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: 'org.spongepowered.mixin'


version = '1.0.3 [BETA] - ' + new Date().format("yyyy-MM-dd")
group = 'me.suff.mc.angels' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'weeping_angels'

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "official", version: "1.17.1"

    runs {

        configureEach {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            arg "-mixin.config=weeping-angels.mixins.json"
        }

        client {
            workingDirectory project.file('run')

            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            mods {
                weeping_angels {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            mods {
                weeping_angels {
                    source sourceSets.main
                }
            }
        }


        data {
            workingDirectory project.file('run')
            args '--mod', 'weeping_angels', '--all', '--output', file('src/generated/resources/')

            mods {
                weeping_angels {
                    source sourceSets.main
                }
            }
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.1.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

mixin {
    add sourceSets.main, "weeping_angels.refmap.json"
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "weeping_angels",
                "Specification-Vendor"    : "suff99",
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : "Weeping Angels",
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "suff99",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

curseforge {
    if (project.hasProperty('curseforge') && project.hasProperty('weeping_angels')) {
        apiKey = rootProject.curseforge
        project {
            id = rootProject.weeping_angels
            changelog = new File("${project.projectDir}/changelog.html").text
            changelogType = 'html'
            releaseType = 'release'
            addGameVersion '1.17.1'
            mainArtifact(jar) {
                displayName = "[1.17.X] Weeping Angels - $project.version"
            }
        }
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth(type: TaskModrinthUpload) {
    if (project.hasProperty('modrinth')) {
        token = rootProject.modrinth
        projectId = 'TEzJJY7H'
        changelog = new File("${project.projectDir}/changelog.html").text
        versionNumber = version // Will fail if Modrinth has this version already
        uploadFile = jar
        // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
        addGameVersion('1.17.1')
        addLoader('forge')
    }
}

task publishExternal(type: GradleBuild, dependsOn: ['curseforge', 'publishModrinth']) {
}
